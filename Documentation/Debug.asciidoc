:toc:

= Debug / Troubleshooting / Investigations

Je vais essayer de consolider ici tous les retours d'expériences et les vérifications à faire pour résoudre un éventuel problème.

== Attention - Danger

=== "retain" dans les objets

* Ce plugin utilise un broker MQTT qui a une fonction spécifique "retain".
* Le plugin [underline]#n'utilise pas# ce mode de fonctionnement. 
    - [underline]#Il est fortement conseillé de ne pas choisir "retain"# si vous ne comprenez pas les conséquences. 
    - L'option reste accessible pour les pros de MQTT. Si jamais vous voulez l'utiliser alors allez voir https://www.hivemq.com/blog/mqtt-essentials-part-8-retained-messages .
 - Si vous avez par erreur activé un "retain" et que le comportement du plugin est impacté, vous pouvez faire la manipulation suivante:

[source,]
----
rm /var/lib/mosquitto/mosquitto.db
apt-get remove mosquitto
apt-get install mosquitto
----

== Problèmes / Issues

Si vous trouvez un problème qui demande une correction dans le plugin, merci d ouvrir une "issue" dans GitHub à l'adresse avec un "Labels" "Bug": https://github.com/KiwiHC16/Abeille/issues

Si vous ouvrez une "issue" merci de fournir le plus d'information possible et en particulier:

- Votre configuration Jeedom: 
* Le HW sur lequel vous faite tourner le plugin, 
* la Version de l'OS, 
* la version de Jeedom

- Votre configuration Gateway
* Zigate et quel firmware
* ...

- Les logs
* aussi nombreux que possibles
- Description 
* ce que vous cherchez à faire
* les résultats

== Evolution

Si vous souhaitez une évolution dans le plugin, merci d ouvrir une "issue" dans GitHub à l'adresse avec un "Labels" "enhancement": https://github.com/KiwiHC16/Abeille/issues


== Debug

=== Configuration 

* Verifier la configuration réseau et en particulier /hostname, /etc/hosts

=== Connection avec la Zigate

* Dans l objet ruche, appuyez sur le bouton "Version", vous devez récupérer la version logicielle dans le champ SW, la version de dev dans le champ SDK et les dates Last et Lasts Stamps doivent se mettre à jour à chaque fois.

=== Mosquitto

* Abeille utilise un broker mosquitto pour échanger des messages entre les modules logicielles.
* mosquitto est installé sur la machine par défaut lors de l'installation des dépendances, vous pouvez utiliser un autre broker, sur une autre machine si vous le souhaitez (pas testé)
* La configuration générale du plugin propose les paramètres :
    - Adresse du broker Mosquitto (peut être présent ailleurs sur le réseau)
    - Port du serveur Mosquitto (1883 par défaut)
    - Identifiant de Jeedom avec lequel il publiera sur le broker
    - Il est possible d'ajouter un compte et mot de passe si la connexion le requiert.
    - QoS à utiliser (par défaut 1).
* Dans santé vous avez le plugin en alerte car mosquitto ne repond pas.
    - Faites un 'ps -ef | grep mosquitto' pour voir si le process tourne.
    - Lancez à la main mosquitto; Juste 'mosquitto' en ligne de commande.
    - Lancez à la main mosquitto avec votre fichier de configuration en ligne de commande: 'mosquitto -c /etc/mosquitto/mosquitto.conf' (Corrigez les erreurs si il y a).
    - Experience: après coupure de courant: 
[source,]
----
mosquitto -c /etc/mosquitto/mosquitto.conf 
1516788158: Error: Success.
1516788158: Error: Couldn't open database.
----

la solution a été de supprimer la base de donnée et de réinstaller mosquitto:

[source,]
----
rm /var/lib/mosquitto/mosquitto.db
apt-get remove mosquitto
apt-get install mosquitto
----


    
=== Creation des objets

* Les modèles des objets sont dans un fichier JSON, ce fichier peut être éditer pour modifier les configurations pas défaut et ajouter de nouveaux modèles par exemple.

* L'appareil Ruche contient une commande cachée par type d'objet (identifié das le fichier JSON). Chaque commande cachée permet la création d'objets fictifs pour vérifier la bonne création de l'objet dans jeedom. Pour avoir les commandes, il faut regénerer l'objet Ruche pour prendre en compte les modifications éventuelles du fichier json. Pour ce faire supprimer Ruche et relancer le démon. Puis un clic sur le bouton pour créer l'objet. 

image::images/Capture_d_ecran_2018_01_23_a_22_31_19.png[]

* Si vour rendez visible ces commandes cachées cela donne:

image::images/Capture_d_ecran_2018_01_23_a_22_31_43.png[]

* En cliquant sur l'un de ces boutons vous vérifier vous testez la bonne création des objets mais aussi que le chemin Jeedom->Mosquitto->Jeedom fonctionne.

* Pas recommandé: Vous pouvez tester la création pure des objets en ligne de commande avec: "php Abeille.class.php 1" en ayant mis les bon paramètres en fin de fichier "Abeille.class.php" (A faire que par ceux qui comprennent ce qu'ils font)

* L'objet obtenu ressemble à cela pour un Xiaomi Temperature Rond:

image::images/Capture_d_ecran_2018_01_23_a_22_53_24.png[]

* Si un objet type Xiaomi Plug, Ampoule IKEA (Il faut que l objet soit en reception radio) a été effacé de Jeedom vous pouvez l'interroger depuis la Ruche et cela devrait le recréer. Mettre dans le champ "Titre" de Get Name, l'adresse (ici example 7c54)  et faites Get Name. Rafraîchir la page et vous devriez avoir l'objet.

image::images/Capture_d_ecran_2018_01_25_a_14_59_34.png[]
image::images/Capture_d_ecran_2018_01_25_a_14_59_43.png[]

* Vous avez aussi la possibilité de lire des attributs de certains équipements en mettant l'adresse dans le titre et les paramètres de l attribut dans le Message comme dans la capture d'écran ci dessous. Regardez dans les logs si vous récupérez des infos (Attention il faut que l'équipement soit à l'écoute):

image::images/Capture_d_ecran_2018_01_25_a_16_12_32.png[]

* Vous avez la possibilité de demander la liste des équipements dans la base interne de la Zigate. Pour ce faire vous avez le bouton "Liste Equipements" sur la ruche. Si vous êtes en mode automatique, les valeurs des objets existants vont se mettre à jour (IEEE, Link Quality et Power-Source). Si vous êtes en mode semi-automatique de même et si l'objet n'existe pas un objet "inconnu" sera créé avec les informations.

image::images/Capture_d_ecran_2018_01_26_a_10_46_04.png[]
image::images/Capture_d_ecran_2018_01_26_a_10_46_13.png[]

* Il peut être nécessaire de faire la demande de la liste pour que les valeurs remontent dans les objets inconnus. Et en attendant un peu on peut avoir un objet avec une longue liste de paramètres (Voir objet 9156 ci dessous).

image::images/Capture_d_ecran_2018_01_26_a_10_52_58.png[]

* Avec la liste des équipements vous avez la liste connue par zigate dans sa base de données. Vous avez aussi la possibilité de voir la liste des equipments qui se sont déconnectés du réseau. Pour cela, il faut qu'ils aient envoyé une commande "leave" à zigate et qu'Abeille soit actif pour enregistrer l'information. Le dernier ayant quitté peut être visualisé sur l'objet ruche:

image::images/Capture_d_ecran_2018_02_07_a_12_54_55.png[]

Nous pouvons voir que l objet ayant pour adresse complete IEEE: 00158d00016d8d4f s'est déconnecté (Leave) avec l'information 00 (Pas décodé pour l'instant).

Si vous souhaitez avoir l'historique alors allez dans le menu:

image::images/Capture_d_ecran_2018_02_07_a_12_49_42.png[]

Puis choisissez Ruche-joinLeave:

image::images/Capture_d_ecran_2018_02_07_a_12_49_56.png[]

et là vous devez avoir toutes les informations:

image::images/Capture_d_ecran_2018_02_07_a_12_50_09.png[]




=== Investigate Equipements

La ruche possede deux commandes pour interoger les objets: ActiveEndPoint et SingleDescriptorRequest.

image::images/Capture_d_ecran_2018_02_06_a_17_33_19.png[]

Dans ActiveEndPoint mettre l'adresse de l'équipement dans le titre puis clic sur le bouton ActiveEndPoint.

Regardez dans la log AbeilleParser, vous devez voir passer la réponse. Par exemple pour une ampoule IKEA:
[source,]
----
AbeilleParser: 2018-02-06 17:40:16[DEBUG]-------------- 2018-02-06 17:40:16: protocolData
AbeilleParser: 2018-02-06 17:40:16[DEBUG]message > 12 char
AbeilleParser: 2018-02-06 17:40:16[DEBUG]Type: 8045 quality: 93
AbeilleParser: 2018-02-06 17:40:16[DEBUG]type: 8045 (Active Endpoints Response)(Not Processed)
AbeilleParser: 2018-02-06 17:40:16[DEBUG]SQN : da
AbeilleParser: 2018-02-06 17:40:16[DEBUG]Status : 00
AbeilleParser: 2018-02-06 17:40:16[DEBUG]Short Address : 6e1b
AbeilleParser: 2018-02-06 17:40:16[DEBUG]Endpoint Count : 01
AbeilleParser: 2018-02-06 17:40:16[DEBUG]Endpoint List :
AbeilleParser: 2018-02-06 17:40:16[DEBUG]Endpoint : 01
----

Il y a donc une seul EndPoint à l'adresse "01" (Donné par les lignes suivant "Endpoint List".

Faire de même pour SingleDescriptorRequest en ajoutant le EndPoint voulu dans le champ Message.

[source,]
----
AbeilleParser: 2018-02-06 17:42:25[DEBUG]-------------- 2018-02-06 17:42:25: protocolData
AbeilleParser: 2018-02-06 17:42:25[DEBUG]message > 12 char
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Type: 8000 quality: 00
AbeilleParser: 2018-02-06 17:42:25[DEBUG]type: 8000 (Status)(Not Processed)
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Length: 5
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Status: 00-(Success)
AbeilleParser: 2018-02-06 17:42:25[DEBUG]SQN: db
AbeilleParser: 2018-02-06 17:42:25[DEBUG]-------------- 2018-02-06 17:42:25: protocolData
AbeilleParser: 2018-02-06 17:42:25[DEBUG]message > 12 char
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Type: 8043 quality: 93
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Type: 8043 (Simple Descriptor Response)(Not Processed)
AbeilleParser: 2018-02-06 17:42:25[DEBUG]SQN : db
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Status : 00
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Short Address : 6e1b
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Length : 20
AbeilleParser: 2018-02-06 17:42:25[DEBUG]endpoint : 01
AbeilleParser: 2018-02-06 17:42:25[DEBUG]profile : c05e
AbeilleParser: 2018-02-06 17:42:25[DEBUG]deviceId : 0100
AbeilleParser: 2018-02-06 17:42:25[DEBUG]bitField : 02
AbeilleParser: 2018-02-06 17:42:25[DEBUG]InClusterCount : 08
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0000 - General: Basic
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0003 - General: Identify
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0004 - General: Groups
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0005 - General: Scenes
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0006 - General: On/Off
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0008 - General: Level Control
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 0B05 - Misc: Diagnostics
AbeilleParser: 2018-02-06 17:42:25[DEBUG]In cluster: 1000 - ZLL: Commissioning
AbeilleParser: 2018-02-06 17:42:25[DEBUG]OutClusterCount : 04
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Out cluster: 0000 - General: Basic
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Out cluster: 0003 - General: Identify
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Out cluster: 0004 - General: Groups
AbeilleParser: 2018-02-06 17:42:25[DEBUG]Out cluster: 0005 - General: Scenes
----

Nous avons maintenant les clusters supportés par cet objet sur son endpoint 01.

...

