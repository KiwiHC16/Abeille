***
*** Abeille developer internal doc
*** Tuya specific support (private cluster)
*** (C) Tcharp38
***

Tuya is part of devices that require a specific support since this framework is mainly based on "non standard" commands using "private" clusters.

Legacy protocol (data points)
=============================
This a Tuya specific protocol based on EF00 private cluster.

    Cluster EF00
    See: https://github.com/zigbeefordomoticz/wiki/blob/master/en-eng/Technical/Tuya-0xEF00.md
    See: https://www.zigbee2mqtt.io/advanced/support-new-devices/02_support_new_tuya_devices.html#_2-adding-your-device
    See: https://developer.tuya.com/en/docs/iot-device-dev/tuya-zigbee-universal-docking-access-standard?id=K9ik6zvofpzql

As a summary this protocol is based on "data points", each corresponding to 1 information (ex: temperature, battery voltage, presence status...).
Each datapoint can be one the different types: binary, number, bitmap, string...
Multiple datapoints can be compressed in one single EF00 attribute.

Format: 1 or more datapoints

    AttributeValue = DpID DpType DpLen DpValue [DpID DpType DpLen DpVal] ...

Legacy support in device models
===============================

Handling Tuya private cluster is done thru "private" structure

    Example:
    "private": {
                    "EF00": {
                        "type": "tuya",
                        "00": { "function": "rcvValueDiv", "info": "0006-01-0000", "div": 10 },
                        "01": { "function": "rcvValue", "info": "0008-01-0000" },
                        "02": {
                            "function": "rcvValueEnum",
                            "enum": {
                                "00": "single",
                                "01": "double",
                                "02": "long"
                            },
                            "comment": "00=single, 01=double, 02=long",
                            "info": "inf_click1"
                        },
                        "0C": {
                            "function": "rcvValve-Status"
                        },
                        "12": {
                            "function": "rcvThermostat-Mode"
                        }
                    }
                }

    This allows to list data-points to take into account (other are ignored), and how to handle them before sending information to given command logical ID.

    Example: "00": { "function": "rcvValueDiv", "info": "0006-01-0000", "div": 10 }

        Datapoint 00 is a value that will be divided by 10 and sent to command with "0006-01-0000" logical ID.

Possible functions:

    rcvValue => Extract value. TODO: AND apply div and/or mult if defined.
    rcvValueDiv => TO REMOVE. Idem 'rcvValue' with 'div' declared.
    rcvValueMult => TO REMOVE. Idem 'rcvValue' with 'mult' declared.
    rcvValueEnum => Convert value to string.
    rcvValue0Is1 => If 0, 1 (true) transmitted to Jeedom, else 0 (false).
    rcvValve-Status => TO REMOVE. Identical to rcvValueEnum with "ON" & "OFF" strings ?
    rcvThermostat-Mode => TO REMOVE. Identical to rcvValueEnum with modes as strings ?

Zosung protocol
===============

TODO (used in infrared remote control)

Zosung protocol support in device models
========================================

    "private": {
        "ED00": { // CLUSTID
            "type": "tuya-zosung"
        },
