***
*** Plugin Abeille
*** Répertoire "core/config/commands"
***

Ce répertoire contient l'ensemble des commandes de base supportées par Abeille.
Chaque équipement en utilise un certain nombre.

Attention !! Toute modification de ce répertoire sera écrasée lors des mises-à-jour du plugin.

Nom des commandes
=================
En dehors des commandes "historiques" en passe d'être normalisées, les noms de fichiers doivent suivre les regles suivantes:
- Toute commande 'action' commande par 'act_'.
- Toute commande 'info' commande par 'inf_'.

- Les commandes specifiques Zigbee (issues du standard Zigbee) sont ensuite prefixées par "zb"
  Ex: inf_zbXXX ou act_zbXXX
  Commandes 'générées': act_zbCmdG-xxxx.
  Commandes reçues du SERVEUR: inf_zbCmdS-xxxx (anciennement inf_zbCmdR-xxxx)
  Commandes reçues du CLIENT: inf_zbCmdC-xxxx.
  Attributs: inf_zbAttr-xxx
  Commandes génériques Zigbee: act_zbXXX
    Ex: act_zbConfigureReporting, act_zbReadAttribute... actions du standard Zigbee.

Format de fichier
=================

Exemple de commande 'info'

    {
      "inf_status": {
        "logicalId": "0006-#EP#-0000",
        "type": "info",
        "subType": "binary",
        "genericType": "LIGHT_STATE_BOOL",
        "invertBinary": "0",
        "template": "light",
        "configuration": {
          "repeatEventManagement": "always",
          "visibilityCategory": "All"
        }
      }
    }

Exemple de commande 'action'

    {
      "act_getStatus": {
        "type": "action",
        "subType": "other",
        "configuration": {
          "topic": "readAttribute",
          "request": "ep=#EP#&clustId=0006&attrId=0000",
          "RefreshData": "1",
          "visibilityCategory": "additionalCommand"
        }
      }
    }

* Clef d'entrée/identificateur: OBLIGATOIRE
  Doit être identique au nom de fichier.

* name: OBLIGATOIRE si l'équipement utilise la directive "include", sinon optionnel
  Nom par défaut de la commande vu par Jeedom.
  Si le fichier est appelé avec la directive "include", c'est le nom officiel de la commande crée.
  Si le fichier est appelé avec la directive "use", alors ce nom est ignoré.

* type: OBLIGATOIRE
  Type de commande: 'info' ou 'action'

* subType: OBLIGATOIRE
  Type d'information: 'binary', 'numeric', 'string'

* logicalId: OBLIGATOIRE si commande INFO
  Ex: '0400-01-0000' pour définir l'information 'luminosité'.

* unit: optionnel
  Permet de préciser l'unité de l'information remontée (cmd 'info').
  Ex: "unit": "%"

* isVisible: EVITER.
  Indique si la commande est visible dans le widget.
  Invisible par défaut ("isVisible":0).
  Ce parametre est à mettre dans le modele d'équipement pour personnaliser la commande.

* isHistorized: EVITER.
  Indique si la commande INFO (pas de sens pour une commande 'action') doit être historisée.
  Non par défaut ("isHistorized":0).
  Ce parametre est à mettre dans le modele d'équipement pour personnaliser la commande.

* genericType: RECOMMANDE
  Permet d'associer un widget représentatif de la commande.

* invertBinary: optionnel.
  Utile uniquement pour une commande 'info' de subType 'binary'.
  Non inversé par défaut ("invertBinary":0).

* template: optionnel.
  Permet de définir le widget qui sera utilisé pour l'affichage de la commande.

* value: ??

* nextLine: after/before
  Impacte l'affichage du widget. Permet de forcer un saut de ligne apres ou avant le widget de la commande.

* configuration:

  * topic: OBLIGATOIRE SI commmande 'action'
    Permet de définir la commande interne Abeille

  * request: optionnel
    Permet de définir les paramétres associés à la commande Abeille.

  * historizeRound: optionnel
    Nombre de digits apres la virgule pour commande 'info' type 'numeric'.

  * visibilityCategory: ??
    Semble être nécessaire au moins pour type "slider" sinon ce dernier ne bouge pas.

  * repeatEventManagement: optionnel
    N'est utile que pour une commande info mais du type "evenement" (la valeur remontée est toujours la meme).
    Exemple:
        Certains équipements remontent l'info "click" et non pas "bouton appuyé, bouton relaché".
        Dans ce cas 'repeatEventManagement' doit être mis sur 'always'.
        "configuration": {
            "repeatEventManagement": "always"
        },

  * execAtCreation: optionnel
    Précise que cette commande doit être exécutée lors de l'appairage de l'équipement.
    Ne l'est pas par défaut.
    Ex: 'execAtCreation': 'Yes'

  * execAtCreationDelay: optionnel
    Delai d'execution en secondes apres l'annonce de la commande ayant le flag 'execAtCreation'.

  * trigOut: optionnel
    Permet, pour une commande info, de définir une commande qui sera mise-à-jour avec la valeur de sortie.
    Le parametre est l'identifiant logique de la commande à déclencher (logicalId).

  * trigOutOffset: optionnel
    Permet, si 'trigOut' est utilisé, de modifier la valeur reçue avant de l'appliquer à la commande pointée par 'trigOut'.

  * calculValueOffset: optionnel (pour cmde info)
    Permet de modifier la valeur d'une cmde info.

  * valueOffset: optionnel (pour cmde action)
    Permet de modifier la valeur d'une cmde action avant de l'executer (equivalent à 'calculValueOffset' d'une cmde info).
        // Ex: "valueOffset": "#value#*10"
        // Ex: "valueOffset": "#value#*#logicid0102-01-F003#/100"

  * Polling: optionnel
    Défini si cette commande 'action' doit etre executée regulierement.
    Valeurs: 'cron', 'cron5', 'cron10', 'cron15', 'cron30', 'cronHourly', 'cronDaily'

  * PollingOnCmdChange: optionnel
    Précise que cette commande 'action' doit être exécutée si la cmde donnée change.
    Ex: "PollingOnCmdChange": "0006-#EP#-0000"

  * PollingOnCmdChangeDelay: optionnel
    ?

  * listValue: optionnel
    Dans le cas d'une commande action du type 'select', permet de définir la liste des cas.
    Ex:
            "Set Sensitivity": {
                "use": "act_zbWriteAttribute-list",
                "params": "clustId=FCC0&attrId=010C&attrType=20&manufId=115F",
                "listValue": "1|low;2|medium;3|high",
                "isVisible": 1,
                "comment": "Motion sensitivity, 1=low, 2=medium, 3=high"
            },

  * returnStateTime: X
    Permet d'indiquer à Jeedom de changer automatique la valeur au bout de X sec à celle de 'returnStateValue'

  * returnStateValue: Y
    Valeur de retour automatique pour une commande info.

  * notStandard: 1
    Permet d'indiquer que l'attribut ne doit pas etre traité comme un attribut ZCL.

  * RefreshData: ??
    Ex: "RefreshData": "1"
